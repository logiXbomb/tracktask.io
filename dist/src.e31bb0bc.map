{"version":3,"sources":["../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/v1.js","../node_modules/uuid/v4.js","../node_modules/uuid/index.js","index.js"],"names":["getItem","key","json","localStorage","result","JSON","parse","e","setItem","stringify","getTasks","setTasks","node","document","getElementById","tl","activeTask","length","id","app","Elm","Main","init","flags","tasks","ports","addTask","subscribe","taskList","push","title","updateTaskList","send","saveTaskList","moveTaskUp","index","findIndex","t","newIndex","i","moveTaskDown","window","addEventListener","evt","prompt"],"mappings":"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","file":"src.e31bb0bc.map","sourceRoot":"../src","sourcesContent":["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","import uuid from 'uuid';\nimport { Elm } from './Main.elm';\n\nconst getItem = key => () => {\n\tconst json = localStorage.getItem(key);\n\tif (json) {\n\t\ttry {\n\t\t\tconst result = JSON.parse(json);\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn null;\n}\n\nconst setItem = key => json => {\n\tlocalStorage.setItem(key, JSON.stringify(json));\n}\n\nconst getTasks = getItem('tasks');\n\nconst setTasks = setItem('tasks');\n\nconst node = document.getElementById('app');\n\nconst tl = getTasks() || [];\nlet activeTask = \"\";\nif (tl && tl.length && tl.length > 0) {\n\tactiveTask = tl[0].id;\n}\n\nconst app = Elm.Main.init({\n\tnode,\n\tflags: {\n\t\tactiveTask,\n\t\ttasks: tl,\n\t},\n});\n\nconst ports = app.ports;\n\nif (ports && ports.addTask) {\n\tports.addTask.subscribe(() => {\n\t\tconst taskList = getTasks() || [];\n\n\t\tconst activeTask = uuid();\n\n\t\ttaskList.push({ id: activeTask, title: '' });\n\n\t\tsetTasks(taskList);\n\n\t\tif (ports && ports.updateTaskList) {\n\t\t\tports.updateTaskList.send({\n\t\t\t\ttaskList,\n\t\t\t\tactiveTask,\n\t\t\t});\n\t\t}\n\t});\n}\n\nif (ports && ports.saveTaskList) {\n\tports.saveTaskList.subscribe(setTasks);\n}\n\nif (ports && ports.moveTaskUp) {\n\tports.moveTaskUp.subscribe(activeTask => {\n\t\tconst tl = getTasks();\n\t\t\n\t\tconst index = tl.findIndex(t => t.id === activeTask);\n\t\tconst newIndex = index - 1;\n\n\t\tconst taskList = [];\n\n\t\tfor (let i = 0; i < tl.length; i++) {\n\t\t\tif (i === newIndex) {\n\t\t\t\ttaskList.push(tl[index]);\n\t\t\t} else if (i === index) {\n\t\t\t\ttaskList.push(tl[newIndex]);\n\t\t\t} else {\n\t\t\t\ttaskList.push(tl[i]);\n\t\t\t}\n\t\t}\n\n\t\tsetTasks(taskList);\n\n\t\tif (ports && ports.updateTaskList) {\n\t\t\tports.updateTaskList.send({\n\t\t\t\ttaskList,\n\t\t\t\tactiveTask,\n\t\t\t});\n\t\t}\n\t});\n}\n\nif (ports && ports.moveTaskDown) {\n\tports.moveTaskDown.subscribe(activeTask => {\n\t\tconst tl = getTasks();\n\t\t\n\t\tconst index = tl.findIndex(t => t.id === activeTask);\n\t\tconst newIndex = index + 1;\n\n\t\tconst taskList = [];\n\n\t\tfor (let i = 0; i < tl.length; i++) {\n\t\t\tif (i === newIndex) {\n\t\t\t\ttaskList.push(tl[index]);\n\t\t\t} else if (i === index) {\n\t\t\t\ttaskList.push(tl[newIndex]);\n\t\t\t} else {\n\t\t\t\ttaskList.push(tl[i]);\n\t\t\t}\n\t\t}\n\n\t\tsetTasks(taskList);\n\n\t\tif (ports && ports.updateTaskList) {\n\t\t\tports.updateTaskList.send({\n\t\t\t\ttaskList,\n\t\t\t\tactiveTask,\n\t\t\t});\n\t\t}\n\t});\n}\n\nwindow.addEventListener('beforeinstallprompt', evt => {\n\tevt.prompt();\n});\n"]}